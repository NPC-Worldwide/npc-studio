name: Build and Release

on:
 push:
   branches:
     - main
 pull_request:
   branches:
     - main
 workflow_dispatch:

jobs:
 build:
   runs-on: ${{ matrix.os }}
   strategy:
     matrix:
       include:
         - os: ubuntu-latest
           platform: linux
           arch: x64
         - os: ubuntu-latest
           platform: linux
           arch: arm64
         - os: windows-latest
           platform: windows
           arch: x64
         - os: windows-latest
           platform: windows
           arch: arm64
         - os: macos-latest
           platform: macos
           arch: arm64
   
   steps:
     - uses: actions/checkout@v4
     
     - name: Get version from package.json
       id: version
       run: |
         VERSION=$(node -p "require('./package.json').version")
         echo "version=$VERSION" >> $GITHUB_OUTPUT
       shell: bash
     
     - name: Setup Node.js
       uses: actions/setup-node@v4
       with:
         node-version: '20'
     
     - name: Setup Python
       uses: actions/setup-python@v4
       with:
         python-version: '3.11'
   
     - name: Install Python dependencies
       run: pip install -r requirements.txt pyinstaller
     
     - name: Install Node dependencies
       run: npm install
     
     - name: Setup cross-compilation (Linux ARM64)
       if: runner.os == 'Linux' && matrix.arch == 'arm64'
       run: |
         sudo dpkg --add-architecture arm64
         sudo apt-get update
         sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
         sudo apt-get install -y libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
         sudo apt-get install -y libcairo2-dev:arm64 libpango1.0-dev:arm64 libjpeg-dev:arm64 libgif-dev:arm64 librsvg2-dev:arm64
         sudo apt-get install -y libpixman-1-dev:arm64 pkg-config
         echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
         echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
         echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
         echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
         echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
         echo "npm_config_target_arch=arm64" >> $GITHUB_ENV
         echo "npm_config_target_platform=linux" >> $GITHUB_ENV
         echo "npm_config_arch=arm64" >> $GITHUB_ENV
     
     - name: Install Windows Build Tools
       if: runner.os == 'Windows'
       run: |
         npm install --global windows-build-tools
         npm config set msvs_version 2022
       continue-on-error: true
     
     - name: Build PyInstaller binary (Linux)
       if: runner.os == 'Linux'
       run: |
         pyinstaller --onefile --clean --distpath pyinstaller_dist --noupx \
           --hidden-import=npcpy --hidden-import=litellm --hidden-import=ollama \
           --hidden-import=flask --hidden-import=flask_cors --hidden-import=flask_sse \
           --hidden-import=redis --hidden-import=pyyaml --hidden-import=pillow \
           --hidden-import=nltk --hidden-import=anthropic --hidden-import=openai \
           --hidden-import=google-genai --hidden-import=tiktoken_ext.openai_public \
           --hidden-import=tiktoken_ext --hidden-import=chromadb --hidden-import=pydantic \
           --exclude-module=scipy --exclude-module=tensorflow --exclude-module=torch \
           --exclude-module=sklearn --exclude-module=notebook --exclude-module=ipython \
           --exclude-module=jupyter --exclude-module=nbconvert --exclude-module=cv2 \
           --exclude-module=PIL.ImageTk --exclude-module=PIL.ImageQt --exclude-module=docx \
           --exclude-module=pptx --exclude-module=cuda --exclude-module=cudnn \
           --exclude-module=cudart --exclude-module=cublas --exclude-module=cupy \
           --exclude-module=logfire --exclude-module=numba.cuda --exclude-module=torch.cuda \
           --exclude-module=tensorflow.python.framework.cuda_util \
           --collect-data=litellm --collect-data=npcpy npc_studio_serve.py
         mkdir -p resources/backend
         cp pyinstaller_dist/npc_studio_serve resources/backend/
         chmod +x resources/backend/npc_studio_serve
     
     - name: Build PyInstaller binary (Windows)
       if: runner.os == 'Windows'
       run: |
         python -m PyInstaller --onefile --clean --distpath pyinstaller_dist --noupx --hidden-import=npcpy --hidden-import=npcsh --hidden-import=flask --hidden-import=flask_cors --hidden-import=flask_sse --hidden-import=redis --hidden-import=pyyaml --hidden-import=pillow --hidden-import=nltk --hidden-import=litellm --hidden-import=anthropic --hidden-import=openai --hidden-import=google-genai --hidden-import=tiktoken_ext.openai_public --hidden-import=tiktoken_ext --hidden-import=sentence_transformers --hidden-import=chromadb --collect-data=litellm --collect-data=npcpy --collect-data=npcsh npc_studio_serve.py
         mkdir -p resources/backend
         copy pyinstaller_dist\npc_studio_serve.exe resources\backend\npc_studio_serve.exe
     
     - name: Build PyInstaller binary (macOS)
       if: runner.os == 'macOS'
       run: |
         pyinstaller --onefile --clean --distpath pyinstaller_dist --noupx \
           --hidden-import=npcpy --hidden-import=litellm --hidden-import=ollama \
           --hidden-import=flask --hidden-import=flask_cors --hidden-import=flask_sse \
           --hidden-import=redis --hidden-import=pyyaml --hidden-import=pillow \
           --hidden-import=anthropic --hidden-import=openai --hidden-import=google-genai \
           --hidden-import=tiktoken_ext.openai_public --hidden-import=tiktoken_ext \
           --hidden-import=chromadb --hidden-import=pydantic \
           --exclude-module=scipy --exclude-module=tensorflow --exclude-module=torch \
           --exclude-module=sklearn --exclude-module=notebook --exclude-module=ipython \
           --exclude-module=jupyter --exclude-module=nbconvert --exclude-module=cv2 \
           --exclude-module=PIL.ImageTk --exclude-module=PIL.ImageQt --exclude-module=docx \
           --exclude-module=pptx --exclude-module=cuda --exclude-module=cudnn \
           --exclude-module=cudart --exclude-module=cublas --exclude-module=cupy \
           --exclude-module=logfire --exclude-module=numba.cuda --exclude-module=torch.cuda \
           --exclude-module=nltk --exclude-module=tensorflow.python.framework.cuda_util \
           --collect-data=litellm --collect-data=npcpy npc_studio_serve.py
         mkdir -p resources/backend
         cp pyinstaller_dist/npc_studio_serve resources/backend/npc_studio_serve
         chmod +x resources/backend/npc_studio_serve
     
     - name: Build frontend
       run: npm run build:vite
     
     - name: Rebuild native dependencies for target architecture
       if: runner.os != 'Windows'
       run: npm rebuild
       env:
         npm_config_target_arch: ${{ matrix.arch }}
     
     - name: Build Electron app
       run: npm run electron:build
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         npm_config_target_arch: ${{ matrix.arch }}
     
     - name: Prepare files for upload
       id: prepare
       run: |
         mkdir -p upload
         VERSION="${{ steps.version.outputs.version }}"
         
         if [ "${{ runner.os }}" = "Linux" ]; then
           if [ "${{ matrix.arch }}" = "arm64" ]; then
             find dist-electron -name "*.deb" -exec cp {} upload/npc-studio_${VERSION}_arm64.deb \;
             find dist-electron -name "*.AppImage" -exec cp {} upload/npc-studio_${VERSION}_arm64.AppImage \;
             echo "files=upload/npc-studio_${VERSION}_arm64.deb upload/npc-studio_${VERSION}_arm64.AppImage" >> $GITHUB_OUTPUT
             echo "gcs_path=linux-arm64" >> $GITHUB_OUTPUT
           else
             find dist-electron -name "*.deb" -exec cp {} upload/npc-studio_${VERSION}_amd64.deb \;
             find dist-electron -name "*.AppImage" -exec cp {} upload/npc-studio_${VERSION}_amd64.AppImage \;
             echo "files=upload/npc-studio_${VERSION}_amd64.deb upload/npc-studio_${VERSION}_amd64.AppImage" >> $GITHUB_OUTPUT
             echo "gcs_path=linux-x64" >> $GITHUB_OUTPUT
           fi
         elif [ "${{ runner.os }}" = "Windows" ]; then
           if [ "${{ matrix.arch }}" = "arm64" ]; then
             find dist-electron -name "*.exe" -exec cp {} upload/npc-studio_${VERSION}_arm64.exe \;
             echo "files=upload/npc-studio_${VERSION}_arm64.exe" >> $GITHUB_OUTPUT
             echo "gcs_path=windows-arm64" >> $GITHUB_OUTPUT
           else
             find dist-electron -name "*.exe" -exec cp {} upload/npc-studio_${VERSION}_amd64.exe \;
             echo "files=upload/npc-studio_${VERSION}_amd64.exe" >> $GITHUB_OUTPUT
             echo "gcs_path=windows-x64" >> $GITHUB_OUTPUT
           fi
         elif [ "${{ runner.os }}" = "macOS" ]; then
           find dist-electron -name "*.dmg" -exec cp {} upload/npc-studio_${VERSION}_arm64.dmg \;
           echo "files=upload/npc-studio_${VERSION}_arm64.dmg" >> $GITHUB_OUTPUT
           echo "gcs_path=macos-arm64" >> $GITHUB_OUTPUT
         fi
       shell: bash
     
     - name: Authenticate to Google Cloud
       if: github.ref == 'refs/heads/main'
       uses: google-github-actions/auth@v2
       with:
         credentials_json: ${{ secrets.GCP_SA_KEY }}
     
     - name: Set up Cloud SDK
       if: github.ref == 'refs/heads/main'
       uses: google-github-actions/setup-gcloud@v2
     
     - name: Upload to Google Cloud Storage
       if: github.ref == 'refs/heads/main'
       run: |
         for file in ${{ steps.prepare.outputs.files }}; do
           if [ -f "$file" ]; then
             filename=$(basename "$file")
             gsutil cp "$file" gs://npc-studio-executables/${{ steps.prepare.outputs.gcs_path }}/"$filename"
             echo "Uploaded $filename to gs://npc-studio-executables/${{ steps.prepare.outputs.gcs_path }}/"
           fi
         done
       shell: bash
     
     - name: Upload artifacts
       uses: actions/upload-artifact@v4
       with:
         name: npc-studio-${{ matrix.platform }}-${{ matrix.arch }}
         path: upload/*
         retention-days: 30

 notify:
   needs: build
   runs-on: ubuntu-latest
   if: github.ref == 'refs/heads/main'
   
   steps:
     - uses: actions/checkout@v4
     - name: Get version from package.json
       id: version
       run: |
         VERSION=$(node -p "require('./package.json').version")
         echo "version=$VERSION" >> $GITHUB_OUTPUT
     
     - name: Create download links summary
       run: |
         VERSION="${{ steps.version.outputs.version }}"
         echo "## New npc-studio build available!" >> $GITHUB_STEP_SUMMARY
         echo "" >> $GITHUB_STEP_SUMMARY
         echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
         echo "" >> $GITHUB_STEP_SUMMARY
         echo "### Download links:" >> $GITHUB_STEP_SUMMARY
         echo "- **Linux x64:** https://storage.googleapis.com/npc-studio-executables/linux-x64/npc-studio_${VERSION}_amd64.deb" >> $GITHUB_STEP_SUMMARY
         echo "- **Linux x64 AppImage:** https://storage.googleapis.com/npc-studio-executables/linux-x64/npc-studio_${VERSION}_amd64.AppImage" >> $GITHUB_STEP_SUMMARY
         echo "- **Linux ARM64:** https://storage.googleapis.com/npc-studio-executables/linux-arm64/npc-studio_${VERSION}_arm64.deb" >> $GITHUB_STEP_SUMMARY
         echo "- **Linux ARM64 AppImage:** https://storage.googleapis.com/npc-studio-executables/linux-arm64/npc-studio_${VERSION}_arm64.AppImage" >> $GITHUB_STEP_SUMMARY
         echo "- **Windows x64:** https://storage.googleapis.com/npc-studio-executables/windows-x64/npc-studio_${VERSION}_amd64.exe" >> $GITHUB_STEP_SUMMARY
         echo "- **Windows ARM64:** https://storage.googleapis.com/npc-studio-executables/windows-arm64/npc-studio_${VERSION}_arm64.exe" >> $GITHUB_STEP_SUMMARY
         echo "- **macOS:** https://storage.googleapis.com/npc-studio-executables/macos-arm64/npc-studio_${VERSION}_arm64.dmg" >> $GITHUB_STEP_SUMMARY